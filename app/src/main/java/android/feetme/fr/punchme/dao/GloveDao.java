package android.feetme.fr.punchme.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import android.feetme.fr.punchme.dao.Glove;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GLOVE".
*/
public class GloveDao extends AbstractDao<Glove, Long> {

    public static final String TABLENAME = "GLOVE";

    /**
     * Properties of entity Glove.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Address = new Property(2, String.class, "address", false, "ADDRESS");
        public final static Property Side = new Property(3, Integer.class, "side", false, "SIDE");
        public final static Property SensorNb = new Property(4, Integer.class, "sensorNb", false, "SENSOR_NB");
        public final static Property SerialNumber = new Property(5, String.class, "serialNumber", false, "SERIAL_NUMBER");
    };


    public GloveDao(DaoConfig config) {
        super(config);
    }
    
    public GloveDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GLOVE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"ADDRESS\" TEXT NOT NULL UNIQUE ," + // 2: address
                "\"SIDE\" INTEGER," + // 3: side
                "\"SENSOR_NB\" INTEGER," + // 4: sensorNb
                "\"SERIAL_NUMBER\" TEXT);"); // 5: serialNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GLOVE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Glove entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getAddress());
 
        Integer side = entity.getSide();
        if (side != null) {
            stmt.bindLong(4, side);
        }
 
        Integer sensorNb = entity.getSensorNb();
        if (sensorNb != null) {
            stmt.bindLong(5, sensorNb);
        }
 
        String serialNumber = entity.getSerialNumber();
        if (serialNumber != null) {
            stmt.bindString(6, serialNumber);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Glove readEntity(Cursor cursor, int offset) {
        Glove entity = new Glove( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // address
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // side
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // sensorNb
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // serialNumber
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Glove entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setAddress(cursor.getString(offset + 2));
        entity.setSide(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setSensorNb(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setSerialNumber(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Glove entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Glove entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
